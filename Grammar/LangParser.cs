//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:\Compilador2\Lang.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, OE=7, CE=8, OB=9, CB=10, 
		AT=11, SEP=12, PLUS=13, MINUS=14, MULT=15, DIV=16, AND=17, OR=18, NOT=19, 
		EQ=20, LT=21, GT=22, LE=23, GE=24, NE=25, BOOL_TRUE=26, BOOL_FALSE=27, 
		IF=28, FUNCTION=29, RETURN=30, THEN=31, ELSE=32, WRITE=33, READ=34, STR=35, 
		INTEGER=36, FLOAT=37, STRING=38, BOOLEAN=39, WHILE=40, REPEAT=41, UNTIL=42, 
		IMPORT=43, EOL=44, NUM=45, VAR=46, COMMENT=47, WS=48;
	public const int
		RULE_prog = 0, RULE_imports = 1, RULE_functions = 2, RULE_function = 3, 
		RULE_fnBody = 4, RULE_params = 5, RULE_line = 6, RULE_funcInvoc = 7, RULE_stmt = 8, 
		RULE_input = 9, RULE_output = 10, RULE_ifst = 11, RULE_forst = 12, RULE_whilest = 13, 
		RULE_block = 14, RULE_cond = 15, RULE_atrib = 16, RULE_declare = 17, RULE_array_declaracao = 18, 
		RULE_type = 19, RULE_array_elements = 20, RULE_expr = 21, RULE_term = 22, 
		RULE_factor = 23;
	public static readonly string[] ruleNames = {
		"prog", "imports", "functions", "function", "fnBody", "params", "line", 
		"funcInvoc", "stmt", "input", "output", "ifst", "forst", "whilest", "block", 
		"cond", "atrib", "declare", "array_declaracao", "type", "array_elements", 
		"expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'++'", "'var'", "'['", "']'", "'%'", "'('", "')'", "'{'", 
		"'}'", "'='", "','", "'+'", "'-'", "'*'", "'/'", "'&&'", "'||'", "'!'", 
		"'=='", "'<'", "'>'", "'<='", "'>='", "'!='", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "OE", "CE", "OB", "CB", "AT", 
		"SEP", "PLUS", "MINUS", "MULT", "DIV", "AND", "OR", "NOT", "EQ", "LT", 
		"GT", "LE", "GE", "NE", "BOOL_TRUE", "BOOL_FALSE", "IF", "FUNCTION", "RETURN", 
		"THEN", "ELSE", "WRITE", "READ", "STR", "INTEGER", "FLOAT", "STRING", 
		"BOOLEAN", "WHILE", "REPEAT", "UNTIL", "IMPORT", "EOL", "NUM", "VAR", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	 
		public ProgContext() { }
		public virtual void CopyFrom(ProgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgLineContext : ProgContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports() {
			return GetRuleContext<ImportsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgLineContext(ProgContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterProgLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitProgLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			_localctx = new ProgLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPORT) {
				{
				State = 48;
				imports();
				}
			}

			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 51;
				functions();
				}
				break;
			}
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				line();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << IF) | (1L << FUNCTION) | (1L << WRITE) | (1L << READ) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOLEAN) | (1L << WHILE) | (1L << REPEAT) | (1L << EOL) | (1L << VAR))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMPORT() { return GetTokens(LangParser.IMPORT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT(int i) {
			return GetToken(LangParser.IMPORT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR() { return GetTokens(LangParser.VAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR(int i) {
			return GetToken(LangParser.VAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(LangParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(LangParser.EOL, i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 2, RULE_imports);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 59;
				Match(IMPORT);
				State = 60;
				Match(VAR);
				State = 61;
				Match(EOL);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IMPORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_functions);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				function();
				State = 67;
				functions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(LangParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(FUNCTION);
			State = 73;
			Match(VAR);
			State = 74;
			Match(OE);
			State = 75;
			@params();
			State = 76;
			Match(CE);
			State = 77;
			Match(OB);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << IF) | (1L << FUNCTION) | (1L << WRITE) | (1L << READ) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOLEAN) | (1L << WHILE) | (1L << REPEAT) | (1L << EOL) | (1L << VAR))) != 0)) {
				{
				State = 78;
				fnBody();
				}
			}

			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 81;
				Match(RETURN);
				State = 82;
				expr();
				State = 83;
				Match(EOL);
				}
			}

			State = 87;
			Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBodyContext : ParserRuleContext {
		public FnBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBody; } }
	 
		public FnBodyContext() { }
		public virtual void CopyFrom(FnBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnBodyLineContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public FnBodyLineContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBodyLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnBodyLineMoreContext : FnBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnBodyContext fnBody() {
			return GetRuleContext<FnBodyContext>(0);
		}
		public FnBodyLineMoreContext(FnBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFnBodyLineMore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnBodyLineMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnBodyContext fnBody() {
		FnBodyContext _localctx = new FnBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_fnBody);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new FnBodyLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				line();
				}
				break;
			case 2:
				_localctx = new FnBodyLineMoreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				line();
				State = 91;
				fnBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(LangParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_params);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(VAR);
				State = 97;
				Match(SEP);
				State = 98;
				@params();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineWhileContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhilestContext whilest() {
			return GetRuleContext<WhilestContext>(0);
		}
		public LineWhileContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineEOLContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineEOLContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineEOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineEOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineEOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineStmtContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		public LineStmtContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineIfContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstContext ifst() {
			return GetRuleContext<IfstContext>(0);
		}
		public LineIfContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineFunctionContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public LineFunctionContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineForContext : LineContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForstContext forst() {
			return GetRuleContext<ForstContext>(0);
		}
		public LineForContext(LineContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 12, RULE_line);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case WRITE:
			case READ:
			case INTEGER:
			case FLOAT:
			case STRING:
			case BOOLEAN:
			case VAR:
				_localctx = new LineStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				stmt();
				State = 103;
				Match(EOL);
				}
				break;
			case IF:
				_localctx = new LineIfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				ifst();
				}
				break;
			case WHILE:
			case REPEAT:
				_localctx = new LineWhileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				whilest();
				}
				break;
			case T__0:
				_localctx = new LineForContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 107;
				forst();
				}
				break;
			case FUNCTION:
				_localctx = new LineFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				function();
				}
				break;
			case EOL:
				_localctx = new LineEOLContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 109;
				Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocContext : ParserRuleContext {
		public FuncInvocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvoc; } }
	 
		public FuncInvocContext() { }
		public virtual void CopyFrom(FuncInvocContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvocLineContext : FuncInvocContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FuncInvocLineContext(FuncInvocContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFuncInvocLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFuncInvocLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvocLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncInvocContext funcInvoc() {
		FuncInvocContext _localctx = new FuncInvocContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcInvoc);
		try {
			_localctx = new FuncInvocLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(VAR);
			State = 113;
			Match(OE);
			State = 114;
			@params();
			State = 115;
			Match(CE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtOutputContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public StmtOutputContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtOutput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtOutput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtInputContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public StmtInputContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtAtribContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		public StmtAtribContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterStmtAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitStmtAtrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAtrib(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineFuncInvocContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncInvocContext funcInvoc() {
			return GetRuleContext<FuncInvocContext>(0);
		}
		public LineFuncInvocContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterLineFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitLineFuncInvoc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineFuncInvoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new StmtAtribContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				atrib();
				}
				break;
			case 2:
				_localctx = new StmtInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				input();
				}
				break;
			case 3:
				_localctx = new StmtOutputContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				output();
				}
				break;
			case 4:
				_localctx = new LineFuncInvocContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 120;
				funcInvoc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InputReadContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(LangParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public InputReadContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterInputRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitInputRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 18, RULE_input);
		try {
			_localctx = new InputReadContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(READ);
			State = 124;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
	 
		public OutputContext() { }
		public virtual void CopyFrom(OutputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OutputWriteContext : OutputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(LangParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputWriteContext(OutputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterOutputWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitOutputWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 20, RULE_output);
		int _la;
		try {
			_localctx = new OutputWriteContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(WRITE);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OE) | (1L << BOOL_TRUE) | (1L << BOOL_FALSE) | (1L << STR) | (1L << NUM) | (1L << VAR))) != 0)) {
				{
				State = 127;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstContext : ParserRuleContext {
		public IfstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifst; } }
	 
		public IfstContext() { }
		public virtual void CopyFrom(IfstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfstIfElseIFContext : IfstContext {
		public BlockContext b1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfstContext ifst() {
			return GetRuleContext<IfstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstIfElseIFContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIfElseIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIfElseIF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIfElseIF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstIfElseContext : IfstContext {
		public BlockContext b1;
		public BlockContext b2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfstIfElseContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstIfContext : IfstContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstIfContext(IfstContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterIfstIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitIfstIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstContext ifst() {
		IfstContext _localctx = new IfstContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifst);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new IfstIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(IF);
				State = 131;
				Match(OE);
				State = 132;
				cond(0);
				State = 133;
				Match(CE);
				State = 134;
				block();
				}
				break;
			case 2:
				_localctx = new IfstIfElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				Match(IF);
				State = 137;
				Match(OE);
				State = 138;
				cond(0);
				State = 139;
				Match(CE);
				State = 140;
				((IfstIfElseContext)_localctx).b1 = block();
				State = 141;
				Match(ELSE);
				State = 142;
				((IfstIfElseContext)_localctx).b2 = block();
				}
				break;
			case 3:
				_localctx = new IfstIfElseIFContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 144;
				Match(IF);
				State = 145;
				Match(OE);
				State = 146;
				cond(0);
				State = 147;
				Match(CE);
				State = 148;
				((IfstIfElseIFContext)_localctx).b1 = block();
				State = 149;
				Match(ELSE);
				State = 150;
				ifst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(LangParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterForst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitForst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstContext forst() {
		ForstContext _localctx = new ForstContext(Context, State);
		EnterRule(_localctx, 24, RULE_forst);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				Match(T__0);
				State = 155;
				Match(OE);
				State = 156;
				cond(0);
				State = 157;
				Match(CE);
				State = 158;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				Match(T__0);
				State = 161;
				Match(OE);
				State = 162;
				cond(0);
				State = 163;
				Match(EOL);
				State = 164;
				Match(VAR);
				State = 165;
				Match(AT);
				State = 166;
				expr();
				State = 167;
				Match(CE);
				State = 168;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				Match(T__0);
				State = 171;
				Match(OE);
				State = 172;
				cond(0);
				State = 173;
				Match(EOL);
				State = 174;
				Match(VAR);
				State = 175;
				Match(T__1);
				State = 176;
				Match(CE);
				State = 177;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(LangParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(LangParser.UNTIL, 0); }
		public WhilestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterWhilest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitWhilest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestContext whilest() {
		WhilestContext _localctx = new WhilestContext(Context, State);
		EnterRule(_localctx, 26, RULE_whilest);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(WHILE);
				State = 182;
				Match(OE);
				State = 183;
				cond(0);
				State = 184;
				Match(CE);
				State = 185;
				block();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(REPEAT);
				State = 188;
				block();
				State = 189;
				Match(UNTIL);
				State = 190;
				cond(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockLineContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockLineContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitBlockLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			_localctx = new BlockLineContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(OB);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 195;
				line();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << IF) | (1L << FUNCTION) | (1L << WRITE) | (1L << READ) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOLEAN) | (1L << WHILE) | (1L << REPEAT) | (1L << EOL) | (1L << VAR))) != 0) );
			State = 200;
			Match(CB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondRelopContext : CondContext {
		public ExprContext e1;
		public IToken RELOP;
		public ExprContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(LangParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(LangParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LangParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LangParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(LangParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(LangParser.GE, 0); }
		public CondRelopContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondRelop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExprContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondExprContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondAndContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LangParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondAndContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondOrContext : CondContext {
		public CondContext c1;
		public CondContext c2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LangParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		public CondOrContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondNotContext : CondContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LangParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public CondNotContext(CondContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterCondNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitCondNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		return cond(0);
	}

	private CondContext cond(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CondContext _localctx = new CondContext(Context, _parentState);
		CondContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_cond, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new CondExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 203;
				expr();
				}
				break;
			case 2:
				{
				_localctx = new CondRelopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				((CondRelopContext)_localctx).e1 = expr();
				State = 205;
				((CondRelopContext)_localctx).RELOP = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << NE))) != 0)) ) {
					((CondRelopContext)_localctx).RELOP = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 206;
				((CondRelopContext)_localctx).e2 = expr();
				}
				break;
			case 3:
				{
				_localctx = new CondNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 208;
				Match(NOT);
				State = 209;
				cond(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 218;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new CondAndContext(new CondContext(_parentctx, _parentState));
						((CondAndContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 212;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 213;
						Match(AND);
						State = 214;
						((CondAndContext)_localctx).c2 = cond(4);
						}
						break;
					case 2:
						{
						_localctx = new CondOrContext(new CondContext(_parentctx, _parentState));
						((CondOrContext)_localctx).c1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_cond);
						State = 215;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 216;
						Match(OR);
						State = 217;
						((CondOrContext)_localctx).c2 = cond(3);
						}
						break;
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
	 
		public AtribContext() { }
		public virtual void CopyFrom(AtribContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracaoContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public DeclaracaoContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracao(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracaoVaziaContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public DeclaracaoVaziaContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclaracaoVazia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclaracaoVazia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracaoVazia(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracaoArrayContext : AtribContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_declaracaoContext array_declaracao() {
			return GetRuleContext<Array_declaracaoContext>(0);
		}
		public DeclaracaoArrayContext(AtribContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclaracaoArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclaracaoArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracaoArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 32, RULE_atrib);
		int _la;
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new DeclaracaoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOLEAN))) != 0)) {
					{
					State = 223;
					declare();
					}
				}

				State = 226;
				Match(VAR);
				State = 227;
				Match(AT);
				State = 228;
				expr();
				}
				break;
			case 2:
				_localctx = new DeclaracaoVaziaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				declare();
				State = 230;
				Match(VAR);
				}
				break;
			case 3:
				_localctx = new DeclaracaoArrayContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 232;
				array_declaracao();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	 
		public DeclareContext() { }
		public virtual void CopyFrom(DeclareContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclararIntContext : DeclareContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LangParser.INTEGER, 0); }
		public DeclararIntContext(DeclareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclararInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclararInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclararFloatContext : DeclareContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangParser.FLOAT, 0); }
		public DeclararFloatContext(DeclareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclararFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclararFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclararBooleanContext : DeclareContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(LangParser.BOOLEAN, 0); }
		public DeclararBooleanContext(DeclareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclararBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclararBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclararVarContext : DeclareContext {
		public DeclararVarContext(DeclareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclararVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclararVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclararStringContext : DeclareContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangParser.STRING, 0); }
		public DeclararStringContext(DeclareContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterDeclararString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitDeclararString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 34, RULE_declare);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new DeclararStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(STRING);
				}
				break;
			case INTEGER:
				_localctx = new DeclararIntContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				_localctx = new DeclararFloatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 237;
				Match(FLOAT);
				}
				break;
			case BOOLEAN:
				_localctx = new DeclararBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				Match(BOOLEAN);
				}
				break;
			case T__2:
				_localctx = new DeclararVarContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declaracaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LangParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LangParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementsContext array_elements() {
			return GetRuleContext<Array_elementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LangParser.CB, 0); }
		public Array_declaracaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_declaracao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterArray_declaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitArray_declaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_declaracao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_declaracaoContext array_declaracao() {
		Array_declaracaoContext _localctx = new Array_declaracaoContext(Context, State);
		EnterRule(_localctx, 36, RULE_array_declaracao);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			type();
			State = 243;
			Match(T__3);
			State = 244;
			Match(NUM);
			State = 245;
			Match(T__4);
			State = 246;
			Match(VAR);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 247;
				Match(AT);
				State = 248;
				Match(OB);
				State = 249;
				array_elements();
				State = 250;
				Match(CB);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(LangParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LangParser.FLOAT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOLEAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(LangParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(LangParser.SEP, i);
		}
		public Array_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterArray_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitArray_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_elementsContext array_elements() {
		Array_elementsContext _localctx = new Array_elementsContext(Context, State);
		EnterRule(_localctx, 40, RULE_array_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			expr();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEP) {
				{
				{
				State = 257;
				Match(SEP);
				State = 258;
				expr();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPlusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprPlusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMinusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprMinusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LangParser.STR, 0); }
		public ExprStringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFalseContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_FALSE() { return GetToken(LangParser.BOOL_FALSE, 0); }
		public ExprFalseContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTrueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TRUE() { return GetToken(LangParser.BOOL_TRUE, 0); }
		public ExprTrueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_expr);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new ExprPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				term();
				State = 265;
				Match(PLUS);
				State = 266;
				expr();
				}
				break;
			case 2:
				_localctx = new ExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				term();
				State = 269;
				Match(MINUS);
				State = 270;
				expr();
				}
				break;
			case 3:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 272;
				term();
				}
				break;
			case 4:
				_localctx = new ExprTrueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 273;
				Match(BOOL_TRUE);
				}
				break;
			case 5:
				_localctx = new ExprFalseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 274;
				Match(BOOL_FALSE);
				}
				break;
			case 6:
				_localctx = new ExprStringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 275;
				Match(STR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermDivContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermMultContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LangParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermMultContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermFactorContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermRestoContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermRestoContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterTermResto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitTermResto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermResto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 44, RULE_term);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new TermMultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				factor();
				State = 279;
				Match(MULT);
				State = 280;
				term();
				}
				break;
			case 2:
				_localctx = new TermDivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				factor();
				State = 283;
				Match(DIV);
				State = 284;
				term();
				}
				break;
			case 3:
				_localctx = new TermRestoContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				factor();
				State = 287;
				Match(T__5);
				State = 288;
				term();
				}
				break;
			case 4:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 290;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorNumContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(LangParser.NUM, 0); }
		public FactorNumContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorVarContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		public FactorVarContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprArrayContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementsContext array_elements() {
			return GetRuleContext<Array_elementsContext>(0);
		}
		public ExprArrayContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterExprArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitExprArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OE() { return GetToken(LangParser.OE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CE() { return GetToken(LangParser.CE, 0); }
		public FactorExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.EnterFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILangListener typedListener = listener as ILangListener;
			if (typedListener != null) typedListener.ExitFactorExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 46, RULE_factor);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new FactorExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				Match(OE);
				State = 294;
				expr();
				State = 295;
				Match(CE);
				}
				break;
			case 2:
				_localctx = new FactorVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				Match(VAR);
				}
				break;
			case 3:
				_localctx = new FactorNumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 298;
				Match(NUM);
				}
				break;
			case 4:
				_localctx = new ExprArrayContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 299;
				Match(VAR);
				State = 300;
				Match(T__3);
				State = 301;
				array_elements();
				State = 302;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return cond_sempred((CondContext)_localctx, predIndex);
		}
		return true;
	}
	private bool cond_sempred(CondContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x135', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x5', '\x2', '\x34', 
		'\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x37', '\n', '\x2', '\x3', '\x2', 
		'\x6', '\x2', ':', '\n', '\x2', '\r', '\x2', '\xE', '\x2', ';', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x41', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\x42', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', 'I', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'R', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '`', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'g', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'q', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '|', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x83', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x9B', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xB6', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xC3', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', 
		'\xC7', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\xC8', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xD5', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xDD', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\xE0', '\v', '\x11', '\x3', '\x12', '\x5', 
		'\x12', '\xE3', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xEC', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xF3', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xFF', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\a', '\x16', '\x106', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\x109', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x117', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x126', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x133', 
		'\n', '\x19', '\x3', '\x19', '\x2', '\x3', ' ', '\x1A', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x2', '\x4', '\x3', '\x2', '\x16', '\x1B', '\x3', '\x2', '&', ')', '\x2', 
		'\x14D', '\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 'J', 
		'\x3', '\x2', '\x2', '\x2', '\n', '_', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\xE', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'r', '\x3', '\x2', '\x2', '\x2', '\x12', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '}', '\x3', '\x2', '\x2', '\x2', '\x16', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xC4', '\x3', '\x2', '\x2', '\x2', ' ', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xEB', '\x3', '\x2', '\x2', '\x2', '$', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xF4', '\x3', '\x2', '\x2', '\x2', '(', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '*', '\x102', '\x3', '\x2', '\x2', 
		'\x2', ',', '\x116', '\x3', '\x2', '\x2', '\x2', '.', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x132', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\x4', '\x3', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x37', '\x5', '\x6', '\x4', '\x2', '\x36', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x5', 
		'\xE', '\b', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\x3', '\x2', '\x2', '\x2', '<', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', '-', '\x2', '\x2', '>', '?', '\a', '\x30', '\x2', '\x2', 
		'?', '\x41', '\a', '.', '\x2', '\x2', '@', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\b', '\x5', '\x2', 
		'\x45', '\x46', '\x5', '\x6', '\x4', '\x2', '\x46', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'I', '\x5', '\b', '\x5', '\x2', 'H', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x1F', '\x2', '\x2', 'K', 
		'L', '\a', '\x30', '\x2', '\x2', 'L', 'M', '\a', '\t', '\x2', '\x2', 'M', 
		'N', '\x5', '\f', '\a', '\x2', 'N', 'O', '\a', '\n', '\x2', '\x2', 'O', 
		'Q', '\a', '\v', '\x2', '\x2', 'P', 'R', '\x5', '\n', '\x6', '\x2', 'Q', 
		'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'W', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', ' ', '\x2', '\x2', 
		'T', 'U', '\x5', ',', '\x17', '\x2', 'U', 'V', '\a', '.', '\x2', '\x2', 
		'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'S', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\a', '\f', '\x2', '\x2', 'Z', '\t', '\x3', '\x2', '\x2', '\x2', 
		'[', '`', '\x5', '\xE', '\b', '\x2', '\\', ']', '\x5', '\xE', '\b', '\x2', 
		']', '^', '\x5', '\n', '\x6', '\x2', '^', '`', '\x3', '\x2', '\x2', '\x2', 
		'_', '[', '\x3', '\x2', '\x2', '\x2', '_', '\\', '\x3', '\x2', '\x2', 
		'\x2', '`', '\v', '\x3', '\x2', '\x2', '\x2', '\x61', 'g', '\a', '\x30', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\x30', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\xE', '\x2', '\x2', '\x64', 'g', '\x5', '\f', '\a', '\x2', '\x65', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x66', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x62', '\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\r', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\x5', '\x12', '\n', '\x2', 'i', 'j', '\a', '.', '\x2', '\x2', 'j', 'q', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'q', '\x5', '\x18', '\r', '\x2', 'l', 
		'q', '\x5', '\x1C', '\xF', '\x2', 'm', 'q', '\x5', '\x1A', '\xE', '\x2', 
		'n', 'q', '\x5', '\b', '\x5', '\x2', 'o', 'q', '\a', '.', '\x2', '\x2', 
		'p', 'h', '\x3', '\x2', '\x2', '\x2', 'p', 'k', '\x3', '\x2', '\x2', '\x2', 
		'p', 'l', '\x3', '\x2', '\x2', '\x2', 'p', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', '\xF', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x30', '\x2', 
		'\x2', 's', 't', '\a', '\t', '\x2', '\x2', 't', 'u', '\x5', '\f', '\a', 
		'\x2', 'u', 'v', '\a', '\n', '\x2', '\x2', 'v', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'w', '|', '\x5', '\"', '\x12', '\x2', 'x', '|', '\x5', '\x14', 
		'\v', '\x2', 'y', '|', '\x5', '\x16', '\f', '\x2', 'z', '|', '\x5', '\x10', 
		'\t', '\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', '{', 'x', '\x3', '\x2', 
		'\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x13', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', 
		'$', '\x2', '\x2', '~', '\x7F', '\a', '\x30', '\x2', '\x2', '\x7F', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x82', '\a', '#', '\x2', '\x2', '\x81', 
		'\x83', '\x5', ',', '\x17', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\x1E', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\t', '\x2', '\x2', '\x86', '\x87', '\x5', ' ', '\x11', 
		'\x2', '\x87', '\x88', '\a', '\n', '\x2', '\x2', '\x88', '\x89', '\x5', 
		'\x1E', '\x10', '\x2', '\x89', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\a', '\x1E', '\x2', '\x2', '\x8B', '\x8C', '\a', '\t', '\x2', 
		'\x2', '\x8C', '\x8D', '\x5', ' ', '\x11', '\x2', '\x8D', '\x8E', '\a', 
		'\n', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\x1E', '\x10', '\x2', '\x8F', 
		'\x90', '\a', '\"', '\x2', '\x2', '\x90', '\x91', '\x5', '\x1E', '\x10', 
		'\x2', '\x91', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 
		'\x1E', '\x2', '\x2', '\x93', '\x94', '\a', '\t', '\x2', '\x2', '\x94', 
		'\x95', '\x5', ' ', '\x11', '\x2', '\x95', '\x96', '\a', '\n', '\x2', 
		'\x2', '\x96', '\x97', '\x5', '\x1E', '\x10', '\x2', '\x97', '\x98', '\a', 
		'\"', '\x2', '\x2', '\x98', '\x99', '\x5', '\x18', '\r', '\x2', '\x99', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\x3', '\x2', '\x2', '\x9D', '\x9E', '\a', '\t', '\x2', 
		'\x2', '\x9E', '\x9F', '\x5', ' ', '\x11', '\x2', '\x9F', '\xA0', '\a', 
		'\n', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\x1E', '\x10', '\x2', '\xA1', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x3', '\x2', 
		'\x2', '\xA3', '\xA4', '\a', '\t', '\x2', '\x2', '\xA4', '\xA5', '\x5', 
		' ', '\x11', '\x2', '\xA5', '\xA6', '\a', '.', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\x30', '\x2', '\x2', '\xA7', '\xA8', '\a', '\r', '\x2', '\x2', 
		'\xA8', '\xA9', '\x5', ',', '\x17', '\x2', '\xA9', '\xAA', '\a', '\n', 
		'\x2', '\x2', '\xAA', '\xAB', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x3', '\x2', '\x2', 
		'\xAD', '\xAE', '\a', '\t', '\x2', '\x2', '\xAE', '\xAF', '\x5', ' ', 
		'\x11', '\x2', '\xAF', '\xB0', '\a', '.', '\x2', '\x2', '\xB0', '\xB1', 
		'\a', '\x30', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x4', '\x2', '\x2', 
		'\xB2', '\xB3', '\a', '\n', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\x1E', 
		'\x10', '\x2', '\xB4', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB8', '\a', '*', '\x2', '\x2', '\xB8', '\xB9', 
		'\a', '\t', '\x2', '\x2', '\xB9', '\xBA', '\x5', ' ', '\x11', '\x2', '\xBA', 
		'\xBB', '\a', '\n', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x1E', '\x10', 
		'\x2', '\xBC', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'+', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x1E', '\x10', '\x2', '\xBF', 
		'\xC0', '\a', ',', '\x2', '\x2', '\xC0', '\xC1', '\x5', ' ', '\x11', '\x2', 
		'\xC1', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', '\a', '\v', '\x2', '\x2', 
		'\xC5', '\xC7', '\x5', '\xE', '\b', '\x2', '\xC6', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\f', 
		'\x2', '\x2', '\xCB', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', 
		'\b', '\x11', '\x1', '\x2', '\xCD', '\xD5', '\x5', ',', '\x17', '\x2', 
		'\xCE', '\xCF', '\x5', ',', '\x17', '\x2', '\xCF', '\xD0', '\t', '\x2', 
		'\x2', '\x2', '\xD0', '\xD1', '\x5', ',', '\x17', '\x2', '\xD1', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x15', '\x2', '\x2', 
		'\xD3', '\xD5', '\x5', ' ', '\x11', '\x3', '\xD4', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD7', '\f', '\x5', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x13', 
		'\x2', '\x2', '\xD8', '\xDD', '\x5', ' ', '\x11', '\x6', '\xD9', '\xDA', 
		'\f', '\x4', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x14', '\x2', '\x2', 
		'\xDB', '\xDD', '\x5', ' ', '\x11', '\x5', '\xDC', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', 
		'\x5', '$', '\x13', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '\x30', '\x2', '\x2', '\xE5', '\xE6', 
		'\a', '\r', '\x2', '\x2', '\xE6', '\xEC', '\x5', ',', '\x17', '\x2', '\xE7', 
		'\xE8', '\x5', '$', '\x13', '\x2', '\xE8', '\xE9', '\a', '\x30', '\x2', 
		'\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEC', '\x5', 
		'&', '\x14', '\x2', '\xEB', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '#', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF3', '\a', 
		'(', '\x2', '\x2', '\xEE', '\xF3', '\a', '&', '\x2', '\x2', '\xEF', '\xF3', 
		'\a', '\'', '\x2', '\x2', '\xF0', '\xF3', '\a', ')', '\x2', '\x2', '\xF1', 
		'\xF3', '\a', '\x5', '\x2', '\x2', '\xF2', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x5', '(', '\x15', '\x2', '\xF5', '\xF6', '\a', 
		'\x6', '\x2', '\x2', '\xF6', '\xF7', '\a', '/', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\a', '\x2', '\x2', '\xF8', '\xFE', '\a', '\x30', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '\r', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\v', '\x2', '\x2', '\xFB', '\xFC', '\x5', '*', '\x16', '\x2', '\xFC', 
		'\xFD', '\a', '\f', '\x2', '\x2', '\xFD', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\'', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\t', '\x3', '\x2', '\x2', '\x101', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x107', '\x5', ',', '\x17', '\x2', '\x103', '\x104', 
		'\a', '\xE', '\x2', '\x2', '\x104', '\x106', '\x5', ',', '\x17', '\x2', 
		'\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x5', '.', '\x18', '\x2', '\x10B', '\x10C', '\a', '\xF', '\x2', '\x2', 
		'\x10C', '\x10D', '\x5', ',', '\x17', '\x2', '\x10D', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', '.', '\x18', '\x2', '\x10F', 
		'\x110', '\a', '\x10', '\x2', '\x2', '\x110', '\x111', '\x5', ',', '\x17', 
		'\x2', '\x111', '\x117', '\x3', '\x2', '\x2', '\x2', '\x112', '\x117', 
		'\x5', '.', '\x18', '\x2', '\x113', '\x117', '\a', '\x1C', '\x2', '\x2', 
		'\x114', '\x117', '\a', '\x1D', '\x2', '\x2', '\x115', '\x117', '\a', 
		'%', '\x2', '\x2', '\x116', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x116', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '-', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x5', '\x30', 
		'\x19', '\x2', '\x119', '\x11A', '\a', '\x11', '\x2', '\x2', '\x11A', 
		'\x11B', '\x5', '.', '\x18', '\x2', '\x11B', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11D', '\x5', '\x30', '\x19', '\x2', '\x11D', '\x11E', 
		'\a', '\x12', '\x2', '\x2', '\x11E', '\x11F', '\x5', '.', '\x18', '\x2', 
		'\x11F', '\x126', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x5', 
		'\x30', '\x19', '\x2', '\x121', '\x122', '\a', '\b', '\x2', '\x2', '\x122', 
		'\x123', '\x5', '.', '\x18', '\x2', '\x123', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x126', '\x5', '\x30', '\x19', '\x2', '\x125', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x120', '\x3', '\x2', '\x2', '\x2', '\x125', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '/', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x128', '\a', '\t', '\x2', '\x2', '\x128', '\x129', '\x5', ',', '\x17', 
		'\x2', '\x129', '\x12A', '\a', '\n', '\x2', '\x2', '\x12A', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x133', '\a', '\x30', '\x2', '\x2', '\x12C', 
		'\x133', '\a', '/', '\x2', '\x2', '\x12D', '\x12E', '\a', '\x30', '\x2', 
		'\x2', '\x12E', '\x12F', '\a', '\x6', '\x2', '\x2', '\x12F', '\x130', 
		'\x5', '*', '\x16', '\x2', '\x130', '\x131', '\a', '\a', '\x2', '\x2', 
		'\x131', '\x133', '\x3', '\x2', '\x2', '\x2', '\x132', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x132', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x33', '\x36', 
		';', '\x42', 'H', 'Q', 'W', '_', '\x66', 'p', '{', '\x82', '\x9A', '\xB5', 
		'\xC2', '\xC8', '\xD4', '\xDC', '\xDE', '\xE2', '\xEB', '\xF2', '\xFE', 
		'\x107', '\x116', '\x125', '\x132',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
