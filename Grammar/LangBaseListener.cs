//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:\Compilador2\Lang.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class LangBaseListener : ILangListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>progLine</c>
	/// labeled alternative in <see cref="LangParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgLine([NotNull] LangParser.ProgLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>progLine</c>
	/// labeled alternative in <see cref="LangParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgLine([NotNull] LangParser.ProgLineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.imports"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImports([NotNull] LangParser.ImportsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.imports"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImports([NotNull] LangParser.ImportsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctions([NotNull] LangParser.FunctionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.functions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctions([NotNull] LangParser.FunctionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] LangParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] LangParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>fnBodyLine</c>
	/// labeled alternative in <see cref="LangParser.fnBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnBodyLine([NotNull] LangParser.FnBodyLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fnBodyLine</c>
	/// labeled alternative in <see cref="LangParser.fnBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnBodyLine([NotNull] LangParser.FnBodyLineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>fnBodyLineMore</c>
	/// labeled alternative in <see cref="LangParser.fnBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnBodyLineMore([NotNull] LangParser.FnBodyLineMoreContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fnBodyLineMore</c>
	/// labeled alternative in <see cref="LangParser.fnBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnBodyLineMore([NotNull] LangParser.FnBodyLineMoreContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.params"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParams([NotNull] LangParser.ParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.params"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParams([NotNull] LangParser.ParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineStmt</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineStmt([NotNull] LangParser.LineStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineStmt</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineStmt([NotNull] LangParser.LineStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineIf</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineIf([NotNull] LangParser.LineIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineIf</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineIf([NotNull] LangParser.LineIfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineWhile</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineWhile([NotNull] LangParser.LineWhileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineWhile</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineWhile([NotNull] LangParser.LineWhileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineFor</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineFor([NotNull] LangParser.LineForContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineFor</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineFor([NotNull] LangParser.LineForContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineFunction</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineFunction([NotNull] LangParser.LineFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineFunction</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineFunction([NotNull] LangParser.LineFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineEOL</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineEOL([NotNull] LangParser.LineEOLContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineEOL</c>
	/// labeled alternative in <see cref="LangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineEOL([NotNull] LangParser.LineEOLContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>funcInvocLine</c>
	/// labeled alternative in <see cref="LangParser.funcInvoc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncInvocLine([NotNull] LangParser.FuncInvocLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>funcInvocLine</c>
	/// labeled alternative in <see cref="LangParser.funcInvoc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncInvocLine([NotNull] LangParser.FuncInvocLineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtAtrib</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtAtrib([NotNull] LangParser.StmtAtribContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtAtrib</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtAtrib([NotNull] LangParser.StmtAtribContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtInput</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtInput([NotNull] LangParser.StmtInputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtInput</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtInput([NotNull] LangParser.StmtInputContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtOutput</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtOutput([NotNull] LangParser.StmtOutputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtOutput</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtOutput([NotNull] LangParser.StmtOutputContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lineFuncInvoc</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLineFuncInvoc([NotNull] LangParser.LineFuncInvocContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lineFuncInvoc</c>
	/// labeled alternative in <see cref="LangParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLineFuncInvoc([NotNull] LangParser.LineFuncInvocContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>inputRead</c>
	/// labeled alternative in <see cref="LangParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInputRead([NotNull] LangParser.InputReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>inputRead</c>
	/// labeled alternative in <see cref="LangParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInputRead([NotNull] LangParser.InputReadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>outputWrite</c>
	/// labeled alternative in <see cref="LangParser.output"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOutputWrite([NotNull] LangParser.OutputWriteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>outputWrite</c>
	/// labeled alternative in <see cref="LangParser.output"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOutputWrite([NotNull] LangParser.OutputWriteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifstIf</c>
	/// labeled alternative in <see cref="LangParser.ifst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfstIf([NotNull] LangParser.IfstIfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifstIf</c>
	/// labeled alternative in <see cref="LangParser.ifst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfstIf([NotNull] LangParser.IfstIfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifstIfElse</c>
	/// labeled alternative in <see cref="LangParser.ifst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfstIfElse([NotNull] LangParser.IfstIfElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifstIfElse</c>
	/// labeled alternative in <see cref="LangParser.ifst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfstIfElse([NotNull] LangParser.IfstIfElseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifstIfElseIF</c>
	/// labeled alternative in <see cref="LangParser.ifst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfstIfElseIF([NotNull] LangParser.IfstIfElseIFContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifstIfElseIF</c>
	/// labeled alternative in <see cref="LangParser.ifst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfstIfElseIF([NotNull] LangParser.IfstIfElseIFContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.forst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForst([NotNull] LangParser.ForstContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.forst"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForst([NotNull] LangParser.ForstContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.whilest"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhilest([NotNull] LangParser.WhilestContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.whilest"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhilest([NotNull] LangParser.WhilestContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blockLine</c>
	/// labeled alternative in <see cref="LangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockLine([NotNull] LangParser.BlockLineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blockLine</c>
	/// labeled alternative in <see cref="LangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockLine([NotNull] LangParser.BlockLineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condRelop</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondRelop([NotNull] LangParser.CondRelopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condRelop</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondRelop([NotNull] LangParser.CondRelopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condExpr</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondExpr([NotNull] LangParser.CondExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condExpr</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondExpr([NotNull] LangParser.CondExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condAnd</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondAnd([NotNull] LangParser.CondAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condAnd</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondAnd([NotNull] LangParser.CondAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condOr</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondOr([NotNull] LangParser.CondOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condOr</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondOr([NotNull] LangParser.CondOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condNot</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondNot([NotNull] LangParser.CondNotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condNot</c>
	/// labeled alternative in <see cref="LangParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondNot([NotNull] LangParser.CondNotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declaracao</c>
	/// labeled alternative in <see cref="LangParser.atrib"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaracao([NotNull] LangParser.DeclaracaoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declaracao</c>
	/// labeled alternative in <see cref="LangParser.atrib"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaracao([NotNull] LangParser.DeclaracaoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declaracaoVazia</c>
	/// labeled alternative in <see cref="LangParser.atrib"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaracaoVazia([NotNull] LangParser.DeclaracaoVaziaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declaracaoVazia</c>
	/// labeled alternative in <see cref="LangParser.atrib"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaracaoVazia([NotNull] LangParser.DeclaracaoVaziaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declaracaoArray</c>
	/// labeled alternative in <see cref="LangParser.atrib"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaracaoArray([NotNull] LangParser.DeclaracaoArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declaracaoArray</c>
	/// labeled alternative in <see cref="LangParser.atrib"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaracaoArray([NotNull] LangParser.DeclaracaoArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declararString</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclararString([NotNull] LangParser.DeclararStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declararString</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclararString([NotNull] LangParser.DeclararStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declararInt</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclararInt([NotNull] LangParser.DeclararIntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declararInt</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclararInt([NotNull] LangParser.DeclararIntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declararFloat</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclararFloat([NotNull] LangParser.DeclararFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declararFloat</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclararFloat([NotNull] LangParser.DeclararFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declararBoolean</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclararBoolean([NotNull] LangParser.DeclararBooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declararBoolean</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclararBoolean([NotNull] LangParser.DeclararBooleanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declararVar</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclararVar([NotNull] LangParser.DeclararVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declararVar</c>
	/// labeled alternative in <see cref="LangParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclararVar([NotNull] LangParser.DeclararVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.array_declaracao"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_declaracao([NotNull] LangParser.Array_declaracaoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.array_declaracao"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_declaracao([NotNull] LangParser.Array_declaracaoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] LangParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] LangParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LangParser.array_elements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_elements([NotNull] LangParser.Array_elementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LangParser.array_elements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_elements([NotNull] LangParser.Array_elementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPlus</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprPlus([NotNull] LangParser.ExprPlusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPlus</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprPlus([NotNull] LangParser.ExprPlusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinus</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMinus([NotNull] LangParser.ExprMinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinus</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMinus([NotNull] LangParser.ExprMinusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprTerm</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTerm([NotNull] LangParser.ExprTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTerm</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTerm([NotNull] LangParser.ExprTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprTrue</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTrue([NotNull] LangParser.ExprTrueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprTrue</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTrue([NotNull] LangParser.ExprTrueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprFalse</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprFalse([NotNull] LangParser.ExprFalseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprFalse</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprFalse([NotNull] LangParser.ExprFalseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprString</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprString([NotNull] LangParser.ExprStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprString</c>
	/// labeled alternative in <see cref="LangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprString([NotNull] LangParser.ExprStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>termMult</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermMult([NotNull] LangParser.TermMultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>termMult</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermMult([NotNull] LangParser.TermMultContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>termDiv</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermDiv([NotNull] LangParser.TermDivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>termDiv</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermDiv([NotNull] LangParser.TermDivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>termResto</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermResto([NotNull] LangParser.TermRestoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>termResto</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermResto([NotNull] LangParser.TermRestoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>termFactor</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermFactor([NotNull] LangParser.TermFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>termFactor</c>
	/// labeled alternative in <see cref="LangParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermFactor([NotNull] LangParser.TermFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>factorExpr</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorExpr([NotNull] LangParser.FactorExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>factorExpr</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorExpr([NotNull] LangParser.FactorExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>factorVar</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorVar([NotNull] LangParser.FactorVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>factorVar</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorVar([NotNull] LangParser.FactorVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>factorNum</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorNum([NotNull] LangParser.FactorNumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>factorNum</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorNum([NotNull] LangParser.FactorNumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprArray</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprArray([NotNull] LangParser.ExprArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprArray</c>
	/// labeled alternative in <see cref="LangParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprArray([NotNull] LangParser.ExprArrayContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Grammar
